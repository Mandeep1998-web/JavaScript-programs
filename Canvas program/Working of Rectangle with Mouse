<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Simmons Stitching v1.0.0</title>
<style type="text/css">
<!--
#container {
    position: relative;
}

#imageView {
border: 1px solid #000;
}
-->
</style>
</head>

<body>
<!--drop down box for selected drawing tools-->
<p>
    <label>Stitching Tool: <select id="selectedTool">
            
           
            <option value="line">Line</option>
            <option value="rectangle">Rectangle</option>
    </select></label>
</p>

<!--drop down box for selected colors.-->
<p>
    <label>Color: <select id="selectedColor">
            <option value="red">Red</option>
            <option value="blue">Blue</option>
            <option value="green">Green</option>
    </select></label>
</p>

<!-- ... -->
</body>
<body>
<div id="container">
    <canvas id="imageView" width="400" height="300">
<p>Wrong browser for this application sucka!  Get a browser worth having!</p>
<p>Try one of these: <a href="http://www.opera.com">Opera</a>, <a
                href="http://www.mozilla.com">Firefox</a>, <a
                href="http://www.apple.com/safari">Safari</a>, and                 <a
                href="http://www.konqueror.org">Konqueror</a>.</p>
</canvas>
</div>
<script>
    // Keep everything in anonymous function, called on window load.
    if (window.addEventListener) {   // if window.add eventlistner  is true
        window
                .addEventListener( // load event occurr and it calls the function
                        'load',
                        function() {
                            var canvas, context, canvaso, contexto;
                            // The active tool instance.
                            var tool;
                            function init() {
                                // Find the canvas element.
                                canvaso = document
                                        .getElementById('imageView'); // imageView is the canvas id
                                contexto = canvaso.getContext('2d'); //The getContext() function returns the drawing context
                                // Add the temporary canvas.// because to draw more than one rectangle
                                var container = canvaso.parentNode; //The parentNode property returns the parent node of the specified node, as a Node object
                                canvas = document.createElement('canvas');
                                // we give the property of parentnode to new node
                                canvas.id = 'imageTemp'; 
                                canvas.width = canvaso.width;
                                canvas.height = canvaso.height;
                                container.appendChild(canvas);
                                context = canvas.getContext('2d');
                                // Get the tool select input.
                                var tool_select = document
                                        .getElementById('selectedTool');
                                tool_select.addEventListener('change',
                                        ev_tool_change, false);
                                // Attach the mousedown, mousemove and mouseup event listeners.
                                canvas.addEventListener('mousedown', // here if any of the mouse activity happend then it will call ev_canvas function
                                        ev_canvas, false);
                                canvas.addEventListener('mousemove',
                                        ev_canvas, false);
                                canvas.addEventListener('mouseup',
                                        ev_canvas, false);
                            }
                            // The general-purpose event handler. This function just determines the mouse 
                            // position relative to the canvas element.
                            function ev_canvas(ev) {
                                if (ev.layerX || ev.layerX == 0) { // Firefox
                                    ev._x = ev.layerX;
                                    ev._y = ev.layerY;
                                } else if (ev.offsetX || ev.offsetX == 0) { // Opera
                                    ev._x = ev.offsetX;
                                    ev._y = ev.offsetY;
                                }
                                // Call the event handler of the tool.
                                var func = tool[ev.type];
                                if (func) {
                                    func(ev);
                                }
                            }
                            // The event handler for any changes made to the tool selector.
                            function ev_tool_change(ev) {
                                if (tools[this.value]) {
                                    tool = new tools[this.value]();
                                }
                            }
                            // This function draws the #imageTemp canvas on top of #imageView, after which 
                            // #imageTemp is cleared. This function is called each time when the user 
                            // completes a drawing operation.
                            function img_update() {
                                contexto.drawImage(canvas, 0, 0); //context.drawImage(img,x,y); where x and y are coordinate
                                context.clearRect(0, 0, canvas.width,
                                        canvas.height); // clearRect() method clears the specified pixels within a given rectangle.
                            }
                            // This object holds the implementation of each drawing tool.
                            var tools = {};
                            // The rectangle tool.
                            tools.rectangle = function() {
                                var tool = this;
                                this.started = false;

                                this.mousedown = function(ev) {
                                    tool.started = true;
                                    tool.x0 = ev._x;
                                    tool.y0 = ev._y;
                                };

                                this.mousemove = function(ev) {
                                    if (!tool.started) {
                                        return;
                                    }
                                    if (tool.started) {

                                        var color_select = document
                                                .getElementById('selectedColor').value;

                                        if (color_select == 'red') {

                                            context.strokeStyle = 'red';
                                        } else if (color_select == 'blue') {

                                            context.strokeStyle = 'blue';
                                        } else if (color_select == 'green') {

                                            context.strokeStyle = 'green';
                                        }

                                        var x = Math.min(ev._x, tool.x0), y = Math
                                                .min(ev._y, tool.y0), w = Math
                                                .abs(ev._x - tool.x0), h = Math
                                                .abs(ev._y - tool.y0);
                                        context
                                                .clearRect(0, 0,
                                                        canvas.width,
                                                        canvas.height); // clear react to clear some pixel of rectangle
                                        if (!w || !h) {
                                            return;
                                        }
                                        context.strokeRect(x, y, w, h); //The strokeRect() method draws a rectangle (no fill). 
                                    }
                                };
                                this.mouseup = function(ev) {
                                    if (tool.started) {
                                        tool.mousemove(ev);
                                        tool.started = false;
                                        img_update();
                                    }
                                };
                            };
                            init();

                        }, false);
    }
</script>
<style type="text/css">
#container {
position: relative;
}

#imageView {
border: 1px solid #000;
}

#imageTemp {
position: absolute;
top: 1px;
left: 1px;
}    
